import pandas as pd
import os

class IMARISDataProcessor:
    """ This class expects a folder generated by IMARIS with the following format
    (SELECTED FOLDER)
    ¦   
    +---SampleA
    ¦       Series10_cells.xls
    ¦       Series10_spots.xls
    ¦       Series11_cells.xls
    ¦       Series11_spots.xls
    ¦       Series12_cells.xls
    ¦       (...)
    
    It will concatenate all (series) data correspondent to a single sample type in a single file and
    then provide statistics on the distribution on different features extracted:
    - intensity of Channel 2
    - number of vesicles
    - sphericity
    - volume
    - number of spots
    """
    CELLS_SHEET_COLUMN = {
        'Cell Number of Vesicles Ves-10': ['Cell Number of Vesicles', 'Nr. Vesicles'],
        'Cell Intensity Mean Ch=2 Img=1': ['Cell Intensity Mean', 'Intensity Mean'],
        'Cell Sphericity': ['Sphericity', 'Sphericity'],
        'Cell Volume' : ['Cell Volume', 'Volume']
    }

    SPOTS_OUT_COL_NAME = 'Nr. Spots'

    def __init__(self, directory, sample_labels = {}):
        self.directory = directory
        self.sample_labels = sample_labels
        
    
    def ExtractSamplesData(self, save_to_excel = True, save_to_pickle = False):
        """ExtractSamplesData returns dataframe containing the samples data
        
        Args:
            save_to_excel (bool, optional): Per sample, save an excel sheet per sample containing the respective series data. Defaults to True.
            save_to_pickle (bool, optional): Save dataframe containing all the samples data. Defaults to False.
        
        Returns:
            [pd.DataFrame]: Samples data
        """
        self.samples_name = IdentifySamples()
        self.sample_dataframes = pd.DataFrame()
        
        # Iterating over each (sample) folder
        for sample in samples_name:
            print("Processing {}".format(sample))
            
            directory_data = self.directory+sample+'/'
            series = IdentifySamples() # and getting all the series                        
            sample_data = pd.DataFrame() # dataframe which will contain all the sample data
            for serie in series:
                nr_spots = ExtractSerieSpotsData(directory_data+serie) # get the cells which we categorized as "spot"
                print("Loading {} ...".format(serie))
                serie_data = ExtractSerieCellsData(directory_data+serie)
                if serie_data.empty:
                    continue
                
                new_sample_spots_df_cols = pd.DataFrame(
                    {'Sample':CreateColumnForSerie(sample, only_first = False),
                    self.SPOTS_OUT_COL_NAME:CreateColumnForSerie(sample)}, 
                    index=serie_data.index.values)
                full_series_data = pd.concat([
                    new_sample_spots_df_cols,
                    serie_data],
                    axis=1)
                    # concatenating series data to form the overall sample dataframe
                sample_data = pd.concat([sample_data,full_series_data])
            
            sample_data.reset_index() # remove cell id as index to avoid overriding when concatenating
            samples_dataframes=sample_dataframes.append(sample_data)
            if save_to_excel:
                sample_data.to_excel (directory+sample+'.xlsx', header=True) 
            sample_data = pd.DataFrame()
        print("Data saved to {}".format(directory))
        if save_to_pickle:
            from datetime import date
            samples_dataframes.to_pickle("./"+ date.today+ ".pkl")
        return sample_dataframes
            
    def IdentifySamples(self):
        """IdentifySamples finds all the samples (each sample has its own folder)  
        
        Returns:
            [list]: contains sample names
        """

        list_samples =[]
        entries = os.listdir(self.directory) # all files/folder within provided directory
        for entry in entries:
            if os.path.isdir(directory+entry) and 'Sample' in entry: # if it is a folder and contains "Sample"
                list_samples.append(entry) # added to the list of samples
        list_samples.sort() # sort them 
        return list_samples     
        
    def IdentifySeries(self):
        """IdentifySeries finds within a sample folder, all the series.
        
        Returns:
            [list]: contains the list of series existing for a given sample
        """
        list_series = []
        entries = os.listdir(self.directory)
        for entry in entries:
            splitted = os.path.splitext(entry) 
            if splitted[-1]==".xls" and 'spots' in splitted[0]: # we are expecting per series to exist a "spots" excel
                list_series.append(splitted[0].split('_')[0])
        list_series.sort()
        return list_series  

    def ExtractSerieSpotsData(self, sample_filename):
        """ExtractSeriesSpotsData from the provided filename, it extracts the number of spots by checking 
            , in the "Diameter" sheet, the number of rows of data. 
        
        Args:
            sample_file ([string]): filename containing the spots data
        
        Returns:
            [int]: number of spots in serie 
        """
        xls = pd.ExcelFile(sample_filename+'_spots.xls')
        return pd.read_excel(xls,sheet_name='Diameter',skiprows=1).shape[0] 

    def ExtractSerieCellsData(self, sample_filename):
        """ExtractCellsData extracts serie's cells data from the "Series[XX]_cells.xls" file
        
        Args:
            sample_filename ([string]): filename containing the cells data
        
        Returns:
            [pd.DataFrame]: dataframe with columns Number of Vesicles, Intensity Mean, Sphericity,
                Volume and ID. Only the cells with at least a vesicles were left in the DataFrame
        """
        xls = pd.ExcelFile(sample_filename+'_cells.xls')
        data_dict = {}
        for sheet, column in self.CELLS_SHEET_COLUMN.items():
            data_dict[column[0]] = pd.read_excel(xls,
                                    sheet_name=sheet,
                                    skiprows=1,
                                    usecols = [column[0], 'ID'])
        # remove nr of vesicles <1
        indices = data_dict[self.CELLS_SHEET_COLUMN['Cell Number Of Vesicles Ves-10'][0]]>0

        
        sample_data = pd.concat([data[indices] for data in data_dict.values()],
                                axis=1)
        sample_data.set_index('ID')            
        return sample_data

    def CreateColumnForSerie(self, value, nr_cells, only_first = True):
        if only_first:
            new_col = [0]*nr_cells
            val_col[0]=value
        else :
            new_col=[value]*nr_cells

    def ExtractMetricsForSamples(self, df):

        
        # SUM
        vesicles = df[['Sample','Cell Number Of Vesicles']].groupby('Sample').sum()
        # MEAN

        # MAX

        # MIN
        vesicles = vesicles.rename(columns = {'Cell Number Of Vesicles':'Total # Vesicles'})
        sphericity = df[['Sample','Cell Sphericity']].groupby('Sample').mean()
        sphericity= sphericity.rename(columns = {'Cell Sphericity':'Mean Sphericity'})
        volume_total = df[['Sample','Cell Volume']].groupby('Sample').sum()
        volume_total= volume_total.rename(columns = {'Cell Volume':'Total Volume'})
        volume_mean = df[['Sample','Cell Volume']].groupby('Sample').mean()
        volume_mean= volume_mean.rename(columns = {'Cell Volume':'Mean Volume'})
        chn_int = df[['Sample','Cell Intensity Mean']].groupby('Sample').mean()
        chn_int= chn_int.rename(columns = {'Cell Intensity Mean':'Mean Intensity'})
        spots = df[['Sample','Nr. Spots']].groupby('Sample').sum()
        new_df = pd.concat([vesicles,sphericity,volume_total,volume_mean,chn_int,spots],axis=1)
        new_df['%MBP+ cells']=new_df.apply(DetermineMBP,axis=1)
        new_df.to_excel (directory+'summary.xlsx', header=True)
        print("Created a summary of the results under {}".format(directory+'summary.xlsx'))


SAMPLE_LABELS = {
    "SampleA": "first",
    "SampleB": "zwei",
    "SampleC": "tres",
    "SampleD": "catorze",
    "SampleE": "funf",
    "SampleF": "six",
    "SampleH": "sieben"
}
VISUALIZE = False # if True, it just shows the plot; if false, the plot is saved to PDF

import seaborn as sns
import matplotlib.pyplot as plt

def GenerateBoxPlots(data, x, x_range = [], swarmplot=True, dir="", visualize = False): 
    if x_range == []:
        x_range = [data[x].min(), data[x].max()]
    f, ax = plt.subplots(figsize=( 20 , len(data['Sample'].unique())*1.5)) # Figure size is set here, you can adjust it
    sns.boxplot(x=x, y="Description", data=data, palette="pastel")
    sns.swarmplot(x=x, y="Description", data=data, alpha=".75", color="0.3")
    ax.xaxis.grid(True)
    ax.set(ylabel="")
    
    if visualize:
        plt.show()
    else:
        f.savefig(directory+x+".pdf")

    return

def GetListSeries(directory):
    list_series = []
    entries = os.listdir(directory)
    for entry in entries:
        splitted = os.path.splitext(entry) 
        if splitted[-1]==".xls" and 'spots' in splitted[0]:
            list_series.append(splitted[0].split('_')[0])
    list_series.sort()
    return list_series
            
def GetSamplesFolder(directory):
    list_samples =[]
    entries = os.listdir(directory)
    for entry in entries:
        if os.path.isdir(directory+entry) and 'Sample' in entry:
            list_samples.append(entry)
    list_samples.sort()
    return list_samples

def GetSpotsData(sample_file):
    xls = pd.ExcelFile(sample_file+'_spots.xls')
    return pd.read_excel(xls,sheet_name='Diameter',skiprows=1).shape[0]

def GetCellsData(sample_file):
    xls = pd.ExcelFile(sample_file+'_cells.xls')
    data_vesicles = pd.read_excel(xls,
                                  sheet_name='Cell Number Of Vesicles Ves-10',
                                  skiprows=1)
    # remove nr of vesicles <1
    indices = data_vesicles['Cell Number Of Vesicles']>0
    data_vesicles = data_vesicles[indices]['Cell Number Of Vesicles'] 
    
    data_green_chn = pd.read_excel(xls,
                                   sheet_name='Cell Intensity Mean Ch=2 Img=1',
                                   skiprows=1)
    data_green_chn = data_green_chn[indices]['Cell Intensity Mean']
    
    data_sphericity = pd.read_excel(xls,
                                   sheet_name='Cell Sphericity',
                                   skiprows=1)     
    data_sphericity = data_sphericity[indices]['Cell Sphericity']

    data_volume = pd.read_excel(xls,
                                   sheet_name='Cell Volume',
                                   skiprows=1)     
    data_volume = data_volume[indices]['Cell Volume']
    
    sample_data = pd.concat([data_vesicles,data_green_chn,data_sphericity,data_volume],
                            axis=1)
    
    return sample_data
        
def GetData(directory):
    samples_name = GetSamplesFolder(directory)
    sample_dataframes = pd.DataFrame()
    
    for sample in samples_name:
        print("Processing {}".format(sample))
        directory_data = directory+sample+'/'
        series = GetListSeries(directory_data)
        full_sample_data = pd.DataFrame()
        for serie in series:
            spots = GetSpotsData(directory_data+serie)
            print("Loading {} ...".format(serie))
            samples_data = GetCellsData(directory_data+serie)
            if samples_data.empty:
                continue
            spots_col = [0]*samples_data.shape[0]
            spots_col[0]=spots
            sample_cols=[sample]*samples_data.shape[0]
            spots_df = pd.DataFrame({'Sample':sample_cols,'Nr. Spots':spots_col}, index=samples_data.index.values)
            full_series_data = pd.concat([spots_df,samples_data],axis=1)
            full_sample_data = pd.concat([full_sample_data,full_series_data])
        full_sample_data.index.name = 'Cell ID'
        full_sample_data.reset_index()
        sample_dataframes=sample_dataframes.append(full_sample_data)
        full_sample_data.to_excel (directory+sample+'.xlsx', header=True) 
        full_sample_data = pd.DataFrame()
    print("Data saved to {}".format(directory))
    return sample_dataframes

def ExtractMetrics(df,directory):
    vesicles = df[['Sample','Cell Number Of Vesicles']].groupby('Sample').sum()
    vesicles = vesicles.rename(columns = {'Cell Number Of Vesicles':'Total # Vesicles'})
    sphericity = df[['Sample','Cell Sphericity']].groupby('Sample').mean()
    sphericity= sphericity.rename(columns = {'Cell Sphericity':'Mean Sphericity'})
    volume_total = df[['Sample','Cell Volume']].groupby('Sample').sum()
    volume_total= volume_total.rename(columns = {'Cell Volume':'Total Volume'})
    volume_mean = df[['Sample','Cell Volume']].groupby('Sample').mean()
    volume_mean= volume_mean.rename(columns = {'Cell Volume':'Mean Volume'})
    chn_int = df[['Sample','Cell Intensity Mean']].groupby('Sample').mean()
    chn_int= chn_int.rename(columns = {'Cell Intensity Mean':'Mean Intensity'})
    spots = df[['Sample','Nr. Spots']].groupby('Sample').sum()
    new_df = pd.concat([vesicles,sphericity,volume_total,volume_mean,chn_int,spots],axis=1)
    new_df['%MBP+ cells']=new_df.apply(DetermineMBP,axis=1)
    new_df.to_excel (directory+'summary.xlsx', header=True)
    print("Created a summary of the results under {}".format(directory+'summary.xlsx'))

def ReplaceLabels(data):
    return SAMPLE_LABELS[data['Sample']]
def DetermineMBP(data):
    
    return data['Total # Vesicles']/data['Nr. Spots']*100

def DetermineMBP2(data):
    
    return data['Cell Number Of Vesicles']/data['Nr. Spots']*100



import sys        
import easygui
if __name__ == "__main__":
    if  len(sys.argv)>1:
        directory = sys.argv[1]
    else: 
        directory= easygui.diropenbox()+'\\'
    samples_data = GetData(directory)
    ExtractMetrics(samples_data,directory)
    features = ['Cell Volume', 'Cell Intensity Mean', 'Cell Sphericity','Cell Number Of Vesicles']
    samples_data['Description']=samples_data.apply(ReplaceLabels,axis=1)
    for feature in features:
        GenerateBoxPlots(samples_data,feature,dir=directory, visualize=VISUALIZE)

    